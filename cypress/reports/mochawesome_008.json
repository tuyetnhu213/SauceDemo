{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-07T21:20:04.640Z",
    "end": "2025-08-07T21:20:17.788Z",
    "duration": 13148,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e159a654-7a75-4bfe-b3fc-ee8dba4fd5b3",
      "title": "",
      "fullFile": "cypress\\e2e\\inventory.cy.js",
      "file": "cypress\\e2e\\inventory.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ef78ce66-1afe-4fad-93af-0a5d5ba17638",
          "title": "Inventory Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate product details page",
              "fullTitle": "Inventory Test Validate product details page",
              "timedOut": null,
              "duration": 2699,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const prodList = inventory.getProdList();\n//Loop prodList array and compare value on the Details page with items in array\ncy.then(() => {\n  prodList.forEach((product, index) => {\n    cy.xpath(\"//img[@alt='\" + product.name + \"']\").click();\n    //validate detail page is navigated\n    cy.url().should('include', 'inventory-item.html?id=');\n    //validate src of image\n    inventory.element.imgDetail().should('have.attr', 'src', product.img);\n    //validate product Name, Description and Price\n    inventory.element.nameDetail().should('have.text', product.name);\n    inventory.element.descDetail().should('have.text', product.desc);\n    inventory.element.priceDetail().should('have.text', product.price);\n    inventory.element.backtoProdBtn().click();\n  });\n});",
              "err": {},
              "uuid": "6013412b-f872-4893-8484-693d62d44195",
              "parentUUID": "ef78ce66-1afe-4fad-93af-0a5d5ba17638",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate number of Products",
              "fullTitle": "Inventory Test Validate number of Products",
              "timedOut": null,
              "duration": 862,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Get the number of ProductsItem element that should be 6\ninventory.element.productItem().should('have.length', 6);",
              "err": {},
              "uuid": "9be70fc3-fb56-4559-97fc-b54dd0476fb0",
              "parentUUID": "ef78ce66-1afe-4fad-93af-0a5d5ba17638",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate each number should have Picture, Name, Description, Price and Add to Cart button",
              "fullTitle": "Inventory Test Validate each number should have Picture, Name, Description, Price and Add to Cart button",
              "timedOut": null,
              "duration": 843,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Loop each Production Item\ninventory.element.productItem().each($el => {\n  //Assert that each production has Image, Name, Description visible\n  inventory.element.itemImg($el).should('be.visible');\n  inventory.element.itemName($el).should('be.visible');\n  inventory.element.itemDesc($el).should('be.visible');\n  //Assert that the price should be in the corrrect format\n  inventory.element.itemPrice($el).invoke('text').should('match', /^\\$\\d+\\.\\d{2}$/);\n  // Regular Expression Explanation:\n  // ^        → Start of string\n  // \\$       → Literal dollar sign ($)\n  // \\d+      → One or more digits (integer part)\n  // \\.       → Literal dot (decimal point)\n  // \\d{2}    → Exactly two digits (decimal part)\n  // $        → End of string\n  //Assert that the Button at each Production should Add to cart\n  inventory.element.addtoCartBtn($el).should('contain', 'Add to cart');\n});",
              "err": {},
              "uuid": "9f1f4966-cbec-469c-9fbf-80a60258cae4",
              "parentUUID": "ef78ce66-1afe-4fad-93af-0a5d5ba17638",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate cart badge updates dynamically",
              "fullTitle": "Inventory Test Validate cart badge updates dynamically",
              "timedOut": null,
              "duration": 1944,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Define a cartList\nlet cartList = [];\n//Loop all products\ninventory.element.productItem().each($el => {\n  //Click button add to cart\n  inventory.element.addtoCartBtn($el).click();\n  //Assert that the text of button should be changed to Remove\n  inventory.element.addtoCartBtn($el).should('contain', 'Remove');\n  //Add the Production Name to the cartList\n  inventory.element.itemName($el).invoke('text').then(text => {\n    cartList.push(text);\n  });\n}).then(() => {\n  //After all products are clicked and cartList is filled\n  //Validate the length of array equal with number of product in the cart emoji\n  inventory.element.cartNumber().should('have.text', `${cartList.length}`);\n});\n//Loop all products again\ninventory.element.productItem().each($el => {\n  //Click button add to cart\n  inventory.element.addtoCartBtn($el).click();\n  //Validate that the button should be changed to Add to Cart\n  inventory.element.addtoCartBtn($el).should('contain', 'Add to cart');\n  //Remove the last item in the cartList\n  inventory.element.itemName($el).invoke('text').then(text => {\n    cartList.filter(item => item !== text);\n  });\n}).then(() => {\n  //After all products are clicked and cartList is filled\n  //Validate the length of array equal with number of product in the cart emoji\n  inventory.element.cartNumber().should('not.exist');\n});",
              "err": {},
              "uuid": "630edf7e-4cf3-4a9a-bfb0-ddd74c1d4c3b",
              "parentUUID": "ef78ce66-1afe-4fad-93af-0a5d5ba17638",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the sort should have 4 options: Name (A to Z), Name (Z to A), Price (low to high), Price (high to low)",
              "fullTitle": "Inventory Test Verify the sort should have 4 options: Name (A to Z), Name (Z to A), Price (low to high), Price (high to low)",
              "timedOut": null,
              "duration": 927,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expectedOption = [{\n  value: 'az',\n  text: 'Name (A to Z)'\n}, {\n  value: 'za',\n  text: 'Name (Z to A)'\n}, {\n  value: 'lohi',\n  text: 'Price (low to high)'\n}, {\n  value: 'hilo',\n  text: 'Price (high to low)'\n}];\ninventory.element.sortBtn().find('option').each(($el, index) => {\n  cy.wrap($el).should('have.value', expectedOption[index].value);\n  cy.wrap($el).should('have.text', expectedOption[index].text);\n});",
              "err": {},
              "uuid": "9581f972-f041-4fc4-a736-ac0370a210d1",
              "parentUUID": "ef78ce66-1afe-4fad-93af-0a5d5ba17638",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify sort function A-Z",
              "fullTitle": "Inventory Test Verify sort function A-Z",
              "timedOut": null,
              "duration": 923,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Create a null prodName array\nconst prodName = [];\n//Make sure the Sort Dropdown should be select A-Z as default\ninventory.element.sortBtn().should('have.value', 'az');\n//Loop each product item and add name into array\ninventory.element.productItem().each($el => {\n  inventory.element.itemName($el).invoke('text').then(text => {\n    prodName.push(text.trim());\n  });\n});\n//Sort the array by alphabet\nconst sortNames = [...prodName].sort();\n//Assert that the list after and before sort should be the same\nexpect(prodName).to.deep.equal(sortNames);",
              "err": {},
              "uuid": "69b51fb2-abc3-4706-991f-ae3cf0e250cf",
              "parentUUID": "ef78ce66-1afe-4fad-93af-0a5d5ba17638",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify sort function Z-A",
              "fullTitle": "Inventory Test Verify sort function Z-A",
              "timedOut": null,
              "duration": 1136,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Create a null prodName array\nconst prodName = [];\n//Loop each product item and add name into array\ninventory.element.productItem().each($el => {\n  inventory.element.itemName($el).invoke('text').then(text => {\n    prodName.push(text.trim());\n  });\n});\n//Sort the array by Z-A\nconst sortNames = [...prodName].sort().reverse();\n//Select sort Z-A\ninventory.element.sortBtn().select('za');\n//Loop each product item and add name into array after selecting sort\ninventory.element.productItem().each($el => {\n  inventory.element.itemName($el).invoke('text').then(text => {\n    prodName.push(text.trim());\n  });\n});\nexpect(prodName).to.deep.equal(sortNames);",
              "err": {},
              "uuid": "afe15e71-24a9-45f0-9bd9-610faf9c560f",
              "parentUUID": "ef78ce66-1afe-4fad-93af-0a5d5ba17638",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify sort function Price Low to High",
              "fullTitle": "Inventory Test Verify sort function Price Low to High",
              "timedOut": null,
              "duration": 1106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Create a null prodPrice array\nconst prodPrice = [];\n//Loop each product item and add price into array\ninventory.element.productItem().each($el => {\n  inventory.element.itemPrice($el).invoke('text').then(text => {\n    prodPrice.push(parseFloat(text.replace('$', '')));\n  });\n});\n//Sort the array by low to high\nconst sortPrice = [...prodPrice].sort();\n//Select sort low to high\ninventory.element.sortBtn().select('lohi');\n//Loop each product item and add price into array after selecting sort\ninventory.element.productItem().each($el => {\n  inventory.element.itemPrice($el).invoke('text').then(text => {\n    prodPrice.push(parseFloat(text.replace('$', '')));\n  });\n});\nexpect(prodPrice).to.deep.equal(sortPrice);",
              "err": {},
              "uuid": "a965fe5b-8742-4ed4-b09a-899747331ab7",
              "parentUUID": "ef78ce66-1afe-4fad-93af-0a5d5ba17638",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify sort function Price High to Low",
              "fullTitle": "Inventory Test Verify sort function Price High to Low",
              "timedOut": null,
              "duration": 1128,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Create a null prodPrice array\nconst prodPrice = [];\n//Loop each product item and add price into array\ninventory.element.productItem().each($el => {\n  inventory.element.itemPrice($el).invoke('text').then(text => {\n    prodPrice.push(parseFloat(text.replace('$', '')));\n  });\n});\n//Sort the array by high to low\nconst sortPrice = [...prodPrice].sort().reverse();\n//Select sort high to low\ninventory.element.sortBtn().select('hilo');\n//Loop each product item and add price into array after selecting sort\ninventory.element.productItem().each($el => {\n  inventory.element.itemPrice($el).invoke('text').then(text => {\n    prodPrice.push(parseFloat(text.replace('$', '')));\n  });\n});\nexpect(prodPrice).to.deep.equal(sortPrice);",
              "err": {},
              "uuid": "98c6bed1-d059-4393-9ed8-4b90e870cb21",
              "parentUUID": "ef78ce66-1afe-4fad-93af-0a5d5ba17638",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6013412b-f872-4893-8484-693d62d44195",
            "9be70fc3-fb56-4559-97fc-b54dd0476fb0",
            "9f1f4966-cbec-469c-9fbf-80a60258cae4",
            "630edf7e-4cf3-4a9a-bfb0-ddd74c1d4c3b",
            "9581f972-f041-4fc4-a736-ac0370a210d1",
            "69b51fb2-abc3-4706-991f-ae3cf0e250cf",
            "afe15e71-24a9-45f0-9bd9-610faf9c560f",
            "a965fe5b-8742-4ed4-b09a-899747331ab7",
            "98c6bed1-d059-4393-9ed8-4b90e870cb21"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11568,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}